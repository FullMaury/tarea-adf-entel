{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "adf-ucb-dw-entel-4536427"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/df_dim_fecha')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Gold"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_silver_datos",
								"type": "DatasetReference"
							},
							"name": "datosFin"
						},
						{
							"dataset": {
								"referenceName": "ds_silver_llamadas",
								"type": "DatasetReference"
							},
							"name": "silverLlamadas"
						},
						{
							"dataset": {
								"referenceName": "ds_silver_datos",
								"type": "DatasetReference"
							},
							"name": "datosInicio"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dim_fecha",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ds_dim_fecha",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "ds_dim_fecha",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          fecha as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT DISTINCT FECHA_FIN AS fecha\\nFROM SILVER.datos\\nWHERE FECHA_FIN IS NOT NULL',",
						"     format: 'query') ~> datosFin",
						"source(output(",
						"          fecha as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT DISTINCT FECHA AS fecha\\nFROM SILVER.llamadas\\nWHERE FECHA IS NOT NULL',",
						"     format: 'query') ~> silverLlamadas",
						"source(output(",
						"          fecha as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT DISTINCT FECHA_INICIO AS fecha\\nFROM SILVER.datos\\nWHERE FECHA_INICIO IS NOT NULL',",
						"     format: 'query') ~> datosInicio",
						"datosFin sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_fecha as integer,",
						"          fecha as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          fecha",
						"     )) ~> sink1",
						"silverLlamadas sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_fecha as integer,",
						"          fecha as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          fecha",
						"     )) ~> sink2",
						"datosInicio sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_fecha as integer,",
						"          fecha as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          fecha",
						"     )) ~> sink3"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_dim_numero')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Gold"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_silver_llamadas",
								"type": "DatasetReference"
							},
							"name": "datosA"
						},
						{
							"dataset": {
								"referenceName": "ds_silver_llamadas",
								"type": "DatasetReference"
							},
							"name": "datosB"
						},
						{
							"dataset": {
								"referenceName": "ds_silver_datos",
								"type": "DatasetReference"
							},
							"name": "datos"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ds_dim_numero",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "ds_dim_numero",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "ds_dim_numero",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          SERVICIO as string,",
						"          REGISTRO as string,",
						"          NUMERO_A as string,",
						"          IMEI_A as string,",
						"          RBS_UTILIZADA_A as string,",
						"          CELDA_A as string,",
						"          LATITUD_A as decimal(9,6),",
						"          LONGITUD_A as decimal(9,6),",
						"          NUMERO_B as string,",
						"          IMEI_B as string,",
						"          RBS_UTILIZADA_B as string,",
						"          CELDA_B as string,",
						"          LATITUD_B as decimal(9,6),",
						"          LONGITUD_B as decimal(9,6),",
						"          FECHA as timestamp,",
						"          DURACION as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT DISTINCT\\n    NUMERO_A AS numero,\\n    IMEI_A AS imei\\nFROM SILVER.llamadas\\nWHERE NUMERO_A IS NOT NULL',",
						"     format: 'query') ~> datosA",
						"source(output(",
						"          numero as string,",
						"          imei as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT DISTINCT\\n    NUMERO_B AS numero,\\n    IMEI_B AS imei\\nFROM SILVER.llamadas\\nWHERE NUMERO_B IS NOT NULL',",
						"     format: 'query') ~> datosB",
						"source(output(",
						"          numero as string,",
						"          imei as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT DISTINCT\\n    NUMERO AS numero,\\n    IMEI AS imei\\nFROM SILVER.datos\\nWHERE NUMERO IS NOT NULL',",
						"     format: 'query') ~> datos",
						"datosA sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_numero as integer,",
						"          numero as string,",
						"          imei as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
						"datosB sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_numero as integer,",
						"          numero as string,",
						"          imei as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          numero,",
						"          imei",
						"     )) ~> sink2",
						"datos sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_numero as integer,",
						"          numero as string,",
						"          imei as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          numero,",
						"          imei",
						"     )) ~> sink3"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cargar_bronze_datos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_cargar_datos",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_cargar_datos",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {},
									"sink2": {}
								},
								"linkedServiceParameters": {}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Bronze"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cargar_silver_datos')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_limpiar_datos",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_limpiar_datos",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"brzDatos": {},
									"silverDatos": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Silver"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cargar_bronze_llamadas')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_cargar_llamadas",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_cargar_llamadas",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								},
								"linkedServiceParameters": {}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Bronze"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/cargar_silver_llamadas')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "df_limpiar_llamadas",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_limpiar_llamadas",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"brzLlamadas": {},
									"silverLlamadas": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Silver"
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}